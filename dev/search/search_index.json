{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CRISPIN \ud83c\udf6a \u00b6 CRISP r screen sequencing analysis pipel IN e formerly known as CRUISE \ud83d\udea7 This project is under active development. It is not yet ready for production use. \ud83d\udea7 Set up \u00b6 CRISPIN is installed on the Biowulf HPC . For installation in other execution environments, refer to the docs . Biowulf \u00b6 CRISPIN is available on Biowulf in the ccbrpipeliner module. You'll first need to start an interactive session and create a directory from where you'll run crispin. # start an interactive node sinteractive --mem = 2g --cpus-per-task = 2 --gres = lscratch:200 # make a working directory for your project and go to it mkdir -p /data/ $USER /crisprseq cd /data/ $USER /crisprseq # load the ccbrpipeliener module module load ccbrpipeliner Usage \u00b6 Initialize and run crispin with test data: # copy the crispin config files to your current directory crispin init # preview the crispin jobs that will run with the test dataset crispin run --mode local -profile test -preview # launch a crispin run on slurm with the test dataset crispin run --mode slurm -profile test,biowulf To run CRISPIN on your own data, you'll need to create a sample sheet. Take a look at the example: assets/samplesheet_test_biowulf.csv . You'll also need to select an appropriate library for your dataset. CRISPIN is bundled with several libraries in assets/lib , or you can download your own. Once you've created a samplesheet with paths to your fastq files, run crispin with the --input option to specify the path to your sample sheet and --library for the path to your library file: crispin run --mode slurm -profile biowulf --input samplesheet.csv --library assets/lib/yusa_library.csv Help & Contributing \u00b6 Come across a bug ? Open an issue and include a minimal reproducible example. Have a question ? Ask it in discussions . Want to contribute to this project? Check out the contributing guidelines . References \u00b6 This repo was originally generated from the CCBR Nextflow Template . The template takes inspiration from nektool 1 and the nf-core template. If you plan to contribute your pipeline to nf-core, don't use this template -- instead follow nf-core's instructions 2 . nektool https://github.com/beardymcjohnface/nektool \u21a9 instructions for nf-core pipelines https://nf-co.re/docs/contributing/tutorials/creating_with_nf_core \u21a9","title":"Home"},{"location":"#crispin","text":"CRISP r screen sequencing analysis pipel IN e formerly known as CRUISE \ud83d\udea7 This project is under active development. It is not yet ready for production use. \ud83d\udea7","title":"CRISPIN \ud83c\udf6a"},{"location":"#set-up","text":"CRISPIN is installed on the Biowulf HPC . For installation in other execution environments, refer to the docs .","title":"Set up"},{"location":"#biowulf","text":"CRISPIN is available on Biowulf in the ccbrpipeliner module. You'll first need to start an interactive session and create a directory from where you'll run crispin. # start an interactive node sinteractive --mem = 2g --cpus-per-task = 2 --gres = lscratch:200 # make a working directory for your project and go to it mkdir -p /data/ $USER /crisprseq cd /data/ $USER /crisprseq # load the ccbrpipeliener module module load ccbrpipeliner","title":"Biowulf"},{"location":"#usage","text":"Initialize and run crispin with test data: # copy the crispin config files to your current directory crispin init # preview the crispin jobs that will run with the test dataset crispin run --mode local -profile test -preview # launch a crispin run on slurm with the test dataset crispin run --mode slurm -profile test,biowulf To run CRISPIN on your own data, you'll need to create a sample sheet. Take a look at the example: assets/samplesheet_test_biowulf.csv . You'll also need to select an appropriate library for your dataset. CRISPIN is bundled with several libraries in assets/lib , or you can download your own. Once you've created a samplesheet with paths to your fastq files, run crispin with the --input option to specify the path to your sample sheet and --library for the path to your library file: crispin run --mode slurm -profile biowulf --input samplesheet.csv --library assets/lib/yusa_library.csv","title":"Usage"},{"location":"#help-contributing","text":"Come across a bug ? Open an issue and include a minimal reproducible example. Have a question ? Ask it in discussions . Want to contribute to this project? Check out the contributing guidelines .","title":"Help &amp; Contributing"},{"location":"#references","text":"This repo was originally generated from the CCBR Nextflow Template . The template takes inspiration from nektool 1 and the nf-core template. If you plan to contribute your pipeline to nf-core, don't use this template -- instead follow nf-core's instructions 2 . nektool https://github.com/beardymcjohnface/nektool \u21a9 instructions for nf-core pipelines https://nf-co.re/docs/contributing/tutorials/creating_with_nf_core \u21a9","title":"References"},{"location":"changelog/","text":"CRISPIN development version \u00b6 Fix spelling of shared SIF directory on biowulf -- it is /data/CCBR_Pipeliner/SIFs with a lowercase \"s\" at the end. (#54, @kelly-sovacool) Enable nextflow timeline & trace reports by default. (#55, @kelly-sovacool) Minor documentation updates. (#57, @kelly-sovacool) CRISPIN 1.0.1 \u00b6 CRISPIN is now archived in Zenodo as v1.0.0. You can cite it with https://doi.org/10.5281/zenodo.13844209 . (@kelly-sovacool) Fix bug in spooker handler. (#49, @kelly-sovacool) CRISPIN 1.0.0 \u00b6 The pipeline name has been changed from CRUISE \ud83d\udef3\ufe0f to CRISPIN \ud83c\udf6a. (#43, @kelly-sovacool) Run spooker on workflow completion. Print the recommended citation in bibtex format with crispin --citation . (#32, @kelly-sovacool) Fix citation information (#38, @kelly-sovacool) Improve the documentation website with a dropdown menu to select which version to view. The latest release is shown by default. (#45, @kelly-sovacool) CRUISE 0.1.1 \u00b6 Bug fixes \u00b6 All scripts in the bin directory are now made executable for all users on biowulf (#25). Data directories are copied recursively during python package installation (#26). CRUISE 0.1.0 \u00b6 This is the first release of CRUISE \ud83c\udf89 New features \u00b6 Trim adapters with cutadapt. Run mageck count. (#9) mageck count only runs if a count table isn't given. Optional: run mageck test and mle. (#9) mageck mle only runs if a design matrix is given. Optional: run drugZ. (#10) Optional: run BAGEL2. (#11) fc (fold change) bf (bayes factor) pr (precision recall) CLI (#16) cruise init to initialize a project directory. cruise run --mode slurm to submit a slurm job to biowulf or frce. --main path/to/main.nf to select a different local install of cruise, or specify the repo ( CCBR/CRUISE ) to get it from GitHub.","title":"Changelog"},{"location":"changelog/#crispin-development-version","text":"Fix spelling of shared SIF directory on biowulf -- it is /data/CCBR_Pipeliner/SIFs with a lowercase \"s\" at the end. (#54, @kelly-sovacool) Enable nextflow timeline & trace reports by default. (#55, @kelly-sovacool) Minor documentation updates. (#57, @kelly-sovacool)","title":"CRISPIN development version"},{"location":"changelog/#crispin-101","text":"CRISPIN is now archived in Zenodo as v1.0.0. You can cite it with https://doi.org/10.5281/zenodo.13844209 . (@kelly-sovacool) Fix bug in spooker handler. (#49, @kelly-sovacool)","title":"CRISPIN 1.0.1"},{"location":"changelog/#crispin-100","text":"The pipeline name has been changed from CRUISE \ud83d\udef3\ufe0f to CRISPIN \ud83c\udf6a. (#43, @kelly-sovacool) Run spooker on workflow completion. Print the recommended citation in bibtex format with crispin --citation . (#32, @kelly-sovacool) Fix citation information (#38, @kelly-sovacool) Improve the documentation website with a dropdown menu to select which version to view. The latest release is shown by default. (#45, @kelly-sovacool)","title":"CRISPIN 1.0.0"},{"location":"changelog/#cruise-011","text":"","title":"CRUISE 0.1.1"},{"location":"changelog/#bug-fixes","text":"All scripts in the bin directory are now made executable for all users on biowulf (#25). Data directories are copied recursively during python package installation (#26).","title":"Bug fixes"},{"location":"changelog/#cruise-010","text":"This is the first release of CRUISE \ud83c\udf89","title":"CRUISE 0.1.0"},{"location":"changelog/#new-features","text":"Trim adapters with cutadapt. Run mageck count. (#9) mageck count only runs if a count table isn't given. Optional: run mageck test and mle. (#9) mageck mle only runs if a design matrix is given. Optional: run drugZ. (#10) Optional: run BAGEL2. (#11) fc (fold change) bf (bayes factor) pr (precision recall) CLI (#16) cruise init to initialize a project directory. cruise run --mode slurm to submit a slurm job to biowulf or frce. --main path/to/main.nf to select a different local install of cruise, or specify the repo ( CCBR/CRUISE ) to get it from GitHub.","title":"New features"},{"location":"contributing/","text":"Contributing to CRISPIN \u00b6 TODO -- describe gitflow, require PRs... Use pre-commit hooks \u00b6 Pre-commit can automatically format your code, check for spelling errors, etc. every time you commit. Install pre-commit if you haven't already, then run pre-commit install to install the hooks specified in .pre-commit-config.yaml . Pre-commit will run the hooks every time you commit. Versions \u00b6 Increment the version number following semantic versioning 1 in the VERSION file. Changelog \u00b6 Keep the changelog up to date with all notable changes in CHANGELOG.md 2 . VS code extensions \u00b6 If you use VS code, installing nf-core extension pack is recommended. Installation \u00b6 For testing and debugging, We recommend installing the dev version of crispin to a user-specific location. git clone https://github.com/CCBR/CRISPIN mkdir -p ~/bin/crispin pip install ./CRISPIN -t ~/bin/crispin export PATH=\"$HOME/bin/crispin/bin:$PATH\" semantic versioning guidelines https://semver.org/ \u21a9 changelog guidelines: https://keepachangelog.com/en/1.1.0/ \u21a9","title":"How to contribute"},{"location":"contributing/#contributing-to-crispin","text":"TODO -- describe gitflow, require PRs...","title":"Contributing to CRISPIN"},{"location":"contributing/#use-pre-commit-hooks","text":"Pre-commit can automatically format your code, check for spelling errors, etc. every time you commit. Install pre-commit if you haven't already, then run pre-commit install to install the hooks specified in .pre-commit-config.yaml . Pre-commit will run the hooks every time you commit.","title":"Use pre-commit hooks"},{"location":"contributing/#versions","text":"Increment the version number following semantic versioning 1 in the VERSION file.","title":"Versions"},{"location":"contributing/#changelog","text":"Keep the changelog up to date with all notable changes in CHANGELOG.md 2 .","title":"Changelog"},{"location":"contributing/#vs-code-extensions","text":"If you use VS code, installing nf-core extension pack is recommended.","title":"VS code extensions"},{"location":"contributing/#installation","text":"For testing and debugging, We recommend installing the dev version of crispin to a user-specific location. git clone https://github.com/CCBR/CRISPIN mkdir -p ~/bin/crispin pip install ./CRISPIN -t ~/bin/crispin export PATH=\"$HOME/bin/crispin/bin:$PATH\" semantic versioning guidelines https://semver.org/ \u21a9 changelog guidelines: https://keepachangelog.com/en/1.1.0/ \u21a9","title":"Installation"},{"location":"nextflow/","text":"nextflow pipeline \u00b6 You can run the nextflow pipeline directly by specifying this GitHub repo. You will need nextflow and either singularity or docker installed. In this case you don't need to run crispin init first, as the config files will be accessed directly from the GitHub repo. nextflow run CCBR/CRISPIN -profile test,singularity You can specify a specific version, tag, or branch with -r : nextflow run CCBR/CRISPIN -r v1.0.0 -profile test,singularity Create and use a custom reference genome: nextflow run CCBR/CRISPIN -profile test -entry MAKE_REFERENCE nextflow run CCBR/CRISPIN -profile test -c results/test/genome/custom_genome.config","title":"nextflow pipeline"},{"location":"nextflow/#nextflow-pipeline","text":"You can run the nextflow pipeline directly by specifying this GitHub repo. You will need nextflow and either singularity or docker installed. In this case you don't need to run crispin init first, as the config files will be accessed directly from the GitHub repo. nextflow run CCBR/CRISPIN -profile test,singularity You can specify a specific version, tag, or branch with -r : nextflow run CCBR/CRISPIN -r v1.0.0 -profile test,singularity Create and use a custom reference genome: nextflow run CCBR/CRISPIN -profile test -entry MAKE_REFERENCE nextflow run CCBR/CRISPIN -profile test -c results/test/genome/custom_genome.config","title":"nextflow pipeline"}]}